Создаём в SQL хранимые процедуры. 

На уровне DAL:
 -В Stored Procedures прописываем константы с названиями хранимых процедур. 
 -В DTO заводим свойства с такими же названиями как поля таблиц в SQL.
 -В IRepositories создаём интерфейсы. Они нужны в том числе для тестов. 
 -Создаём репозитории, которые реализуют интерфейсы
 -В Options прописываем строку подключения к БД, которая будет обращаться к переменным среды.
 
 FitnessClubDB
 Data Source=194.87.210.5;Initial Catalog=FitnessClub; User ID ='student'; Password='qwe!23'; TrustServerCertificate=true
 
 На уровне BLL:
 Первая задача - преобразовать DTO в модели.  
  - Создаём модели. Входные модели - данные, получаемые от пользователя. Выходные - данные, выводимые пользователю.
  - Создаём Clients (аналог репозиториев на DAL) - библиотеки для общения с репозиториями. Содержит методы для преобразования DTO в модели, библиотеку AutoMapper,
  MapperConfiguration 
  - Создаём MappingProfile
  Вторая задача - выстроить логику, наложить условия, провести проверки

  Чат-бот
   -Общение начинается со /start. Для общения / и Команды под кнопками
   -BotFather /newbot
   

   Сессия каждого клиента - в объекте класса (где мы будем сохранять данные)
   Найти клиента - по chatID, сделать словарь с клиентами
   Класс клиента реализует в себе методы на обработку сообщений

   Общение с клиентом - абстрактный класс. Применять обработку в зависимости от текущего состояния.

   Диалог регистрации: Как понять роль? 2 варианта:
   1. Заранее вносить Telegram user ID в базу и сравнивать
   2. Одноразовые 6 значные пароли (можно хранить рядом с клиентом)

   /start - автоматом как клиент
   /login - зайти под ролью

   Для того чтобы телеграмм клиент был один, создать сторонний класс и положить клиент в переменную класса
   
   
   
   stack pop для pull идеален
   
   Login User Id 
   
  Одноразовый пароль